// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/SIM-MBKM/filestorage/storage"
	"github.com/google/wire"
	"gorm.io/gorm"
	"registration-service/config"
	"registration-service/controller"
	"registration-service/repository"
	"registration-service/service"
)

// Injectors from wire.go:

func InitializeRegistration(db *gorm.DB, secretKey config.SecretKey, userManagementbaseURI config.UserManagementbaseURI, activityManagementbaseURI config.ActivityManagementbaseURI, asyncURIs config.AsyncURIs, config2 *storage.Config, tokenManager *storage.CacheTokenManager) (controller.RegistrationController, error) {
	registrationRepository := ProvideRegistrationRepository(db)
	documentRepository := ProvideDocumentRepository(db)
	registrationService := ProvideRegistrationService(registrationRepository, documentRepository, secretKey, userManagementbaseURI, activityManagementbaseURI, asyncURIs, config2, tokenManager)
	registrationController := ProvideRegistrationController(registrationService)
	return registrationController, nil
}

// wire.go:

func ProvideRegistrationRepository(db *gorm.DB) repository.RegistrationRepository {
	return repository.NewRegistrationRepository(db)
}

func ProvideDocumentRepository(db *gorm.DB) repository.DocumentRepository {
	return repository.NewDocumentRepository(db)
}

func ProvideRegistrationService(
	registrationRepository repository.RegistrationRepository,
	documentRepository repository.DocumentRepository,
	secretKey config.SecretKey,
	userManagementbaseURI config.UserManagementbaseURI,
	activityManagementbaseURI config.ActivityManagementbaseURI,
	asyncURIs config.AsyncURIs, config2 *storage.Config,
	tokenManager *storage.CacheTokenManager,
) service.RegistrationService {
	return service.NewRegistrationService(registrationRepository, documentRepository, string(secretKey), string(userManagementbaseURI), string(activityManagementbaseURI), []string(asyncURIs), config2, tokenManager)
}

func ProvideRegistrationController(registrationService service.RegistrationService) controller.RegistrationController {
	return controller.NewRegistrationController(registrationService)
}

var RegistrationSet = wire.NewSet(
	ProvideRegistrationRepository,
	ProvideDocumentRepository,
	ProvideRegistrationService,
	ProvideRegistrationController,
)
